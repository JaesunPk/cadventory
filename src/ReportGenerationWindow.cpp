#include "ReportGenerationWindow.h"

#include <QComboBox>
#include <QDesktopServices>
#include <QFileDialog>
#include <QHBoxLayout>
#include <QLabel>
#include <QLineEdit>
#include <QListView>
#include <QMessageBox>
#include <QPainter>
#include <QPdfWriter>
#include <QPushButton>
#include <QString>
#include <QThread>
#include <QUrl>
#include <QVBoxLayout>
#include <iostream>
#include <string>

#include "config.h"
#include "ui_reportgenerationwindow.h"

ReportGenerationWindow::ReportGenerationWindow(QWidget* parent, Model* model,
                                               Library* library)
    : QWidget(parent),
      model(model),
      library(library),
      ui(new Ui::ReportGenerationWindow),
      title("3D Model Inventory Report"),
      username("username"),
      version("Generated by CADventory 1.0.4 and BRLCAD 7.38.0") {
  ui->setupUi(this);

  connect(ui->outputDirectory_pushButton, &QPushButton::clicked, this,
          &ReportGenerationWindow::onOutputDirectoryButtonClicked);
  connect(ui->logo1_pushButton, &QPushButton::clicked, this,
          &ReportGenerationWindow::onLogo1ButtonClicked);
  connect(ui->logo2_pushButton, &QPushButton::clicked, this,
          &ReportGenerationWindow::onLogo2ButtonClicked);
  connect(ui->logo2_pushButton, &QPushButton::clicked, this,
          &ReportGenerationWindow::onLogo2ButtonClicked);
  connect(ui->generateReport_pushButton, &QPushButton::clicked, this,
          &ReportGenerationWindow::onGenerateReportButtonClicked);
}

void ReportGenerationWindow::onGenerateReportButtonClicked() {
  // need output directory
  if (output_directory.empty()) {
    QMessageBox msgBox(this);
    msgBox.setText("No Directory Found");
    QString message = "Please choose a directory to store your report.";
    msgBox.setInformativeText(message);
    msgBox.setStyleSheet("QLabel{min-width: 300px;}");
    msgBox.exec();
    return;
  }

  auto t = std::time(nullptr);
  auto tm = *std::localtime(&t);
  std::ostringstream oss;
  oss << std::put_time(&tm, "%m-%d-%Y, %H:%M:%S");
  auto time = oss.str();

  std::cout << "directory to save: " << output_directory << std::endl;
  std::string report_filepath = output_directory + "/report_" + time + ".pdf";

  QPdfWriter pdfWriter(QString::fromStdString(report_filepath));
  pdfWriter.setResolution(300);
  pdfWriter.setPageSize(QPageSize(QPageSize::A4));
  QPainter painter(&pdfWriter);

  // fonts
  QFont font("Helvetica", 18);
  QFont font_two("Helvetica", 6);
  QFont title_font("Arial", 32);
  title_font.setWeight(QFont::Bold);
  QFont version_font("Arial", 12);
  QFont subtext_and_user_font("Arial", 12);
  int max_width = 2480;
  int max_height = 3508;

  // cover report

  // title
  if (!ui->title_textEdit->toPlainText().isEmpty()) {
    title = ui->title_textEdit->toPlainText().toStdString();
  }

  painter.setFont(title_font);
  painter.drawText(max_width / 2 - 900, max_height / 2 - 150,
                   QString::fromStdString(title));

  // top logo
  if (!logo1_filepath.empty()) {
    QPixmap top_logo(QString::fromStdString(logo1_filepath));
    painter.drawPixmap(300, 300, top_logo);
  }

  // version text
  if (!ui->version_textEdit->toPlainText().isEmpty()) {
    version = ui->version_textEdit->toPlainText().toStdString();
  }
  painter.setPen(Qt::gray);
  painter.setFont(version_font);

  // bottom logo, and placing version
  if (!logo2_filepath.empty()) {
    QPixmap bottom_logo(QString::fromStdString(logo2_filepath));
    painter.drawPixmap(max_width - 300 - bottom_logo.width(),
                       max_height - 300 - bottom_logo.height(), bottom_logo);
    painter.drawText(300, max_height - 300 - (bottom_logo.height() / 2),
                     QString::fromStdString(version));

  } else {
    painter.drawText(300, max_height - 300, QString::fromStdString(version));
  }

  // user and date, drawtext with rectangles
  if (!ui->username_textEdit->toPlainText().isEmpty()) {
    username = ui->username_textEdit->toPlainText().toStdString();
  }
  painter.setPen(Qt::black);
  painter.setFont(subtext_and_user_font);
  const QRect user_rect = QRect(max_width - 300 - 300, 300, 300, 150);
  painter.drawText(user_rect, Qt::AlignRight | Qt::TextWordWrap,
                   QString::fromStdString(username));
  const QRect date_rect = QRect(max_width - 300 - 600, 450, 600, 200);
  painter.drawText(date_rect, Qt::AlignRight,
                   QString::fromStdString(time.substr(0, time.find(","))));

  // Set a font for the text
  if (pdfWriter.newPage()) {
    painter.setFont(font);
    painter.drawText(750, 200, "Cadventory");
    painter.setPen(QPen(Qt::black, 3));
    painter.drawLine(-200, 250, 2450, 250);
    painter.drawLine(-200, 3400, 2450, 3400);
    painter.setFont(font_two);
    painter.drawText(
        300, 300,
        QString::fromStdString("Library: " + std::string(library->name())));
    painter.drawText(300, 350,
                     QString::fromStdString("Report Generated on: " + time));
    // will need to adjust for windows, macos "local home" libraries
  } else {
    std::cout << "error: new page failed" << std::endl;
  }

  int x = 325;
  int y = 400;

  painter.drawText(x, y, "Geometry");
  y += 25;

  for (const auto& str : library->getGeometry()) {
    y += 25;
    painter.drawText(x, y, QString::fromStdString(str));
  }
  y += 50;
  painter.drawText(x, y, "Images");
  y += 25;
  for (const auto& str : library->getImages()) {
    y += 25;
    painter.drawText(x, y, QString::fromStdString(str));
  }
  y += 50;
  painter.drawText(x, y, "Documents");
  y += 25;
  for (const auto& str : library->getDocuments()) {
    y += 25;
    painter.drawText(x, y, QString::fromStdString(str));
  }

    ProcessGFiles gFileProcessor(model);
    int num_file = 0;
    std::cout << "generating gist reports" << std::endl;
    painter.setFont(font);
    painter.rotate(90);

    std::vector<std::string> err_vec;

    std::vector<ModelData> selectedModels = model->getSelectedModels();

    // Iterate through each selected model
    for (const auto& modelData : selectedModels) {
        std::string path_gist_output = output_directory + "/" + std::to_string(num_file) + ".png";

        ui->fileInProcess_label->setText(QString::fromStdString(modelData.file_path));

        // Use the generateGistReport method
        auto [success, errorMessage] = gFileProcessor.generateGistReport(modelData.file_path, path_gist_output);

        if (success) {
            // Load the generated PNG image
            QString png_qstr = QString::fromStdString(path_gist_output);
            QPixmap gist(png_qstr);

            bool status_newpage = pdfWriter.newPage();
            if (!status_newpage) {
                std::cerr << "Failed to create new PDF page." << std::endl;
            }
            painter.drawPixmap(0, -2408, gist);
        } else {
            // Handle the error
            std::string err = "Model: " + modelData.file_path + "\nError:\n" + errorMessage;
            err_vec.push_back(err);
            painter.rotate(-90);
            painter.setFont(font);
            painter.drawText(100, 100, QString::fromStdString(modelData.file_path));
            painter.setFont(font_two);
            painter.drawText(100, 150, QString::fromStdString(errorMessage));
            painter.rotate(90);
        }

        ui->progressBar->setValue(int(num_file / selectedModels.size()));
        num_file++;
    }

    //     // retrieve associated objects for the current model
    //     std::vector<ObjectData> associatedObjects =
    //     model->getObjectsForModel(modelData.id);

    //     // if (associatedObjects.empty()) {
    //     //     std::cout << "No associated objects for this model.\n";
    //     // } else {
    //     //     std::cout << "Associated Objects (" <<
    //     associatedObjects.size() << "):\n";

    //     //     for (const auto& obj : associatedObjects) {
    //     //         std::cout << "  -------------------------\n";
    //     //         std::cout << "  Object ID: " << obj.object_id << "\n";
    //     //         std::cout << "  Name: " << obj.name << "\n";
    //     //         std::cout << "  Parent Object ID: "
    //     //                   << (obj.parent_object_id != -1 ?
    //     std::to_string(obj.parent_object_id) : "None")
    //     //                   << "\n";
    //     //         std::cout << "  Is Selected: " << (obj.is_selected ? "Yes"
    //     : "No") << "\n";
    //     //     }
    //     //     std::cout << "  -------------------------\n";
    //     // }

    //     std::cout << "==============================\n\n";



  ui->progressBar->setValue(100);
  ui->fileInProcess_label->setText(QString::fromStdString("Complete"));

  painter.end();

  std::cout << "Report Generated" << std::endl;
  if (err_vec.size()) {
    // Convert std::vector<std::string> to QString
    QString message;
    for (const auto& str : err_vec) {
      message += QString::fromStdString(str) +
                 "\n";  // Append each string with a newline
    }

    // Create and show the popup
    QMessageBox msgBox(this);
    msgBox.setText("Errors:");
    msgBox.setInformativeText(message);
    msgBox.exec();
  }
  QDesktopServices::openUrl(QUrl(
      QString::fromStdString(output_directory)));  // open pdf after generation
}

void ReportGenerationWindow::onOutputDirectoryButtonClicked() {
  QString temp_dir_1 = QFileDialog::getExistingDirectory(
      this, tr("Choose Directory to store Output"));

  if (temp_dir_1.isEmpty()) {
    QMessageBox msgBox(this);
    msgBox.setText("No Directory Found");
    QString message = "Please choose a directory to store your report.";
    msgBox.setInformativeText(message);
    msgBox.setStyleSheet("QLabel{min-width: 300px;}");
    msgBox.exec();
    return;
  }
  ui->outputDirectory_textEdit->setPlainText(temp_dir_1);
  output_directory = temp_dir_1.toStdString();
}
void ReportGenerationWindow::onLogo1ButtonClicked() {
  QString top_logo_path =
      QFileDialog::getOpenFileName(this, tr("Choose first logo for report."),
                                   "", tr("Images (*.png *.xpm *.jpg)"));
  ui->logo1_textEdit->setPlainText(top_logo_path);
  logo1_filepath = top_logo_path.toStdString();
}
void ReportGenerationWindow::onLogo2ButtonClicked() {
  QString bottom_logo_path =
      QFileDialog::getOpenFileName(this, tr("Choose second logo for report."),
                                   "", tr("Images (*.png *.xpm *.jpg)"));
  ui->logo2_textEdit->setPlainText(bottom_logo_path);
  logo2_filepath = bottom_logo_path.toStdString();
}

ReportGenerationWindow::~ReportGenerationWindow() { delete ui; }
